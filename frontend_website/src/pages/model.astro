
---
import Layout from "../layouts/Layout.astro"
---

<Layout>
 
<h1>TensorFlow.js Pose Detection</h1>
    <div class="container">
        <div>
            <select id="modelSelect">
                <option value="movenet">MoveNet</option>
                <option value="blazepose">BlazePose</option>
                <option value="posenet">PoseNet</option>
            </select>
            <button id="startBtn">Start Camera</button>
            <button id="stopBtn" disabled>Stop Camera</button>
        </div>
        <video id="video" width="640" height="480" autoplay style="display: none;"></video>
        <canvas id="canvas" width="640" height="480">hi</canvas>
        <div id="status">Loading models...</div>
    </div>    

       <!-- TensorFlow.js Core -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/4.2.0/tf.min.js" ></script>

<!-- TensorFlow.js Models (TFJS Pose Detection) -->
<script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow-models/pose-detection@2.0.0"></script>
    <script is:inline>
let detector;
let model = 'movenet';
let video;
let canvas;
let ctx;
let isRunning = false;
let rafId;

// DOM elements
const statusDiv = document.getElementById('status');
const startBtn = document.getElementById('startBtn');
const stopBtn = document.getElementById('stopBtn');
const modelSelect = document.getElementById('modelSelect');

document.addEventListener('DOMContentLoaded', init);


// Initialize the application
async function init() {
    
    statusDiv.textContent = 'Loading TensorFlow.js...';

    // Make sure TF.js is loaded
    await tf.ready();

    // Setup canvas
    canvas = document.getElementById('canvas');
    ctx = canvas.getContext('2d');

    // Get camera element
    video = document.getElementById('video');

    // Setup event listeners
    startBtn.addEventListener('click', startCamera);
    stopBtn.addEventListener('click', stopCamera);
    modelSelect.addEventListener('change', changeModel);

    // Load the initial model
    await loadModel();

    statusDiv.textContent = 'Model loaded. Click "Start Camera" to begin.';
}





// Load the selected pose detection model
async function loadModel() {
    if (detector) {
        detector.dispose();
    }

    statusDiv.textContent = `Loading ${model} model...`;

    try {
        let modelConfig;

        if (model === 'movenet') {
            modelConfig = {
                modelType: poseDetection.movenet.modelType.SINGLEPOSE_LIGHTNING
            };
        } else if (model === 'blazepose') {
            modelConfig = {
                runtime: 'tfjs',
                modelType: 'full'
            };
        } else if (model === 'posenet') {
            modelConfig = {
                architecture: 'MobileNetV1',
                outputStride: 16,
                inputResolution: { width: 640, height: 480 },
                multiplier: 0.75
            };
        }

        detector = await poseDetection.createDetector(
            model === 'movenet'
                ? poseDetection.SupportedModels.MoveNet
                : model === 'blazepose'
                    ? poseDetection.SupportedModels.BlazePose
                    : poseDetection.SupportedModels.PoseNet,
            modelConfig
        );

        statusDiv.textContent = `${model} model loaded!`;
    } catch (error) {
        statusDiv.textContent = `Error loading model: ${error.message}`;
        console.error(error);
    }
}




// Start the camera and pose detection
async function startCamera() {
    try {
        const constraints = {
            video: {
                width: 640,
                height: 480
            }
        };

        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        video.srcObject = stream;

        video.onloadedmetadata = () => {
            video.play();
            video.style.display = 'none';
            startBtn.disabled = true;
            stopBtn.disabled = false;
            modelSelect.disabled = true;
            isRunning = true;
            statusDiv.textContent = 'Camera started. Detecting poses...';
            detectPose();
        };
    } catch (error) {
        statusDiv.textContent = `Error accessing camera: ${error.message}`;
        console.error(error);
    }
} true;
// Stop the camera and pose detection
function stopCamera() {
    if (video.srcObject) {
        video.srcObject.getTracks().forEach(track => track.stop());
        video.srcObject = null;
    }

    if (rafId) {
        cancelAnimationFrame(rafId);
        rafId = null;
    }

    startBtn.disabled = false;
    stopBtn.disabled = true;
    modelSelect.disabled = false;
    isRunning = false;
    statusDiv.textContent = 'Camera stopped.';

            stopBtn.disabled = false;
            modelSelect.disabled = true;
            isRunning = true;
            const label = chosenDevice.label || `Camera ${nextIndex + 1}`;
            statusDiv.textContent = `Camera started (${label}). Detecting poses...`;
            detectPose();
        };
    } catch (error) {
        statusDiv.textContent = `Error accessing camera: ${error.message}`;
        console.error(error);
    }
}
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
}
// Change the pose detection model
async function changeModel() {
    model = modelSelect.value;
    await loadModel();
    statusDiv.textContent = `${model} model loaded. Click "Start Camera" to begin.`;
}
// Continuously detect poses
async function detectPose() {
    if (!isRunning) return;

    if (video.readyState === 4) {
        // Draw the video frame
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Detect poses
        try {
            const poses = await detector.estimatePoses(video);

            // Draw the poses
            drawPoses(poses);

            statusDiv.textContent = `Detecting poses using ${model}...`;
        } catch (error) {
            console.error('Error detecting poses:', error);
        }
    }

    // Continue detection loop
    rafId = requestAnimationFrame(detectPose);
}
// Draw detected poses on the canvas
function drawPoses(poses) {
    // For each detected pose
    for (const pose of poses) {
        // Draw keypoints
        for (const keypoint of pose.keypoints) {
            if (keypoint.score > 0.3) {
                ctx.beginPath();
                ctx.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);
                ctx.fillStyle = 'red';
                ctx.fill();

                // Optionally draw keypoint name
                ctx.fillStyle = 'white';
                ctx.fillText(keypoint.name, keypoint.x + 10, keypoint.y + 5);
            }
        }

        // Draw skeleton (if available)
        if (pose.keypoints.length > 5) { // Basic check to ensure we have enough keypoints
            drawSkeleton(pose);
        }
    }
}
// Draw the skeleton connecting keypoints
function drawSkeleton(pose) {
    // Define connections for a human skeleton
    const connections = [
        ['nose', 'left_eye'], ['nose', 'right_eye'],
        ['left_eye', 'left_ear'], ['right_eye', 'right_ear'],
        ['nose', 'left_shoulder'], ['nose', 'right_shoulder'],
        ['left_shoulder', 'left_elbow'], ['right_shoulder', 'right_elbow'],
        ['left_elbow', 'left_wrist'], ['right_elbow', 'right_wrist'],
        ['left_shoulder', 'right_shoulder'],
        ['left_shoulder', 'left_hip'], ['right_shoulder', 'right_hip'],
        ['left_hip', 'right_hip'],
        ['left_hip', 'left_knee'], ['right_hip', 'right_knee'],
        ['left_knee', 'left_ankle'], ['right_knee', 'right_ankle']
    ];

    // Create a map for fast keypoint lookup
    const keypointMap = {};
    pose.keypoints.forEach(keypoint => {
        keypointMap[keypoint.name] = keypoint;
    });

    // Draw connections
    ctx.strokeStyle = 'green';
    ctx.lineWidth = 4;

    for (const [p1Name, p2Name] of connections) {
        const p1 = keypointMap[p1Name];
        const p2 = keypointMap[p2Name];

        if (p1 && p2 && p1.score > 0.3 && p2.score > 0.3) {
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
        }
    }
}
    </script>
</Layout>